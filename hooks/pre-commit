#!/bin/bash

# Pre-commit hook to prevent committing secrets
# Install by copying to .git/hooks/pre-commit and making executable:
#   cp hooks/pre-commit .git/hooks/pre-commit
#   chmod +x .git/hooks/pre-commit

set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo "üîí Running pre-commit security checks..."

# Get list of staged files (excluding documentation and security scripts)
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -v -E '(SECURITY.*\.md|\.env\.example|hooks/|scripts/scan-secrets\.sh|scripts/setup-security\.sh)' || true)

if [ -z "$STAGED_FILES" ]; then
    echo -e "${GREEN}‚úÖ No files to check (only documentation/security files modified)${NC}"
    exit 0
fi

FOUND_ISSUES=0

# Function to check a file for secrets
check_file() {
    local file=$1
    local found_in_file=0
    
    # Skip documentation, security tools, and example files
    case "$file" in
        *.md|*.MD)
            # Skip all markdown files (documentation)
            return 0
            ;;
        hooks/*|scripts/scan-secrets.sh|scripts/setup-security.sh|.env.example)
            # Skip security tools and example files
            return 0
            ;;
    esac
    
    # Skip binary files (check if file command exists)
    if command -v file >/dev/null 2>&1; then
        if file "$file" | grep -q "binary"; then
            return 0
        fi
    fi
    
    # Check for Stripe keys
    if grep -q "sk_test_[a-zA-Z0-9]" "$file" 2>/dev/null; then
        if ! grep "sk_test_" "$file" | grep -q "PLACEHOLDER\|YOUR_\|example\|sk_test_\"\|sk_test_'"; then
            echo -e "${RED}‚ö†Ô∏è  Potential Stripe test key in: $file${NC}"
            grep -n "sk_test_" "$file" | head -3
            found_in_file=1
        fi
    fi
    
    if grep -q "sk_live_" "$file" 2>/dev/null; then
        echo -e "${RED}üö® CRITICAL: Potential Stripe LIVE key in: $file${NC}"
        grep -n "sk_live_" "$file" | head -3
        found_in_file=1
    fi
    
    if grep -q "pk_test_[a-zA-Z0-9]" "$file" 2>/dev/null; then
        if ! grep "pk_test_" "$file" | grep -q "PLACEHOLDER\|YOUR_\|example"; then
            echo -e "${RED}‚ö†Ô∏è  Potential Stripe public key in: $file${NC}"
            grep -n "pk_test_" "$file" | head -3
            found_in_file=1
        fi
    fi
    
    if grep -q "pk_live_" "$file" 2>/dev/null; then
        echo -e "${RED}üö® CRITICAL: Potential Stripe LIVE public key in: $file${NC}"
        grep -n "pk_live_" "$file" | head -3
        found_in_file=1
    fi
    
    # Check for webhook secrets
    if grep -q "whsec_[a-zA-Z0-9]" "$file" 2>/dev/null; then
        if ! grep "whsec_" "$file" | grep -q "PLACEHOLDER\|YOUR_\|example\|test_secret"; then
            echo -e "${RED}‚ö†Ô∏è  Potential webhook secret in: $file${NC}"
            grep -n "whsec_" "$file" | head -3
            found_in_file=1
        fi
    fi
    
    # Check for PayPal credentials
    if grep -E "client_id.*=.*['\"][A-Za-z0-9]{20,}['\"]" "$file" 2>/dev/null; then
        if ! grep "client_id" "$file" | grep -q "PLACEHOLDER\|YOUR_\|example\|CLIENT_ID"; then
            echo -e "${YELLOW}‚ö†Ô∏è  Potential PayPal client_id in: $file${NC}"
            grep -n "client_id" "$file" | head -3
            found_in_file=1
        fi
    fi
    
    if grep -E "client_secret.*=.*['\"][A-Za-z0-9]{20,}['\"]" "$file" 2>/dev/null; then
        if ! grep "client_secret" "$file" | grep -q "PLACEHOLDER\|YOUR_\|example\|CLIENT_SECRET"; then
            echo -e "${RED}‚ö†Ô∏è  Potential client_secret in: $file${NC}"
            grep -n "client_secret" "$file" | head -3
            found_in_file=1
        fi
    fi
    
    # Check for Square tokens
    if grep -E "sq0atp-[a-zA-Z0-9\-_]{22,}" "$file" 2>/dev/null; then
        echo -e "${RED}‚ö†Ô∏è  Potential Square access token in: $file${NC}"
        grep -n "sq0atp-" "$file" | head -3
        found_in_file=1
    fi
    
    if grep -E "EAAA[a-zA-Z0-9]{20,}" "$file" 2>/dev/null; then
        echo -e "${RED}‚ö†Ô∏è  Potential Square token in: $file${NC}"
        grep -n "EAAA" "$file" | head -3
        found_in_file=1
    fi
    
    # Check for AWS credentials
    if grep -E "AKIA[0-9A-Z]{16}" "$file" 2>/dev/null; then
        echo -e "${RED}üö® CRITICAL: Potential AWS access key in: $file${NC}"
        grep -n "AKIA" "$file" | head -3
        found_in_file=1
    fi
    
    # Check for private keys
    if grep -q "BEGIN.*PRIVATE KEY" "$file" 2>/dev/null; then
        echo -e "${RED}üö® CRITICAL: Private key in: $file${NC}"
        grep -n "BEGIN.*PRIVATE KEY" "$file" | head -3
        found_in_file=1
    fi
    
    # Check for .env file
    if [ "$(basename "$file")" = ".env" ]; then
        echo -e "${RED}üö® CRITICAL: Attempting to commit .env file!${NC}"
        echo "The .env file should never be committed. Add it to .gitignore."
        found_in_file=1
    fi
    
    return $found_in_file
}

# Check each staged file
for file in $STAGED_FILES; do
    if [ -f "$file" ]; then
        if check_file "$file"; then
            FOUND_ISSUES=$((FOUND_ISSUES + 1))
        fi
    fi
done

# Summary and exit
echo ""
if [ $FOUND_ISSUES -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Security check passed! No secrets detected in staged files.${NC}"
    exit 0
else
    echo -e "${RED}‚ùå Security check failed! Found potential secrets in $FOUND_ISSUES file(s).${NC}"
    echo ""
    echo "Options:"
    echo "1. Remove the secrets and use environment variables instead"
    echo "2. If these are example placeholders, make them clearly fake (e.g., 'sk_test_PLACEHOLDER')"
    echo "3. If you're certain these are safe, you can bypass with: git commit --no-verify"
    echo ""
    echo "See SECURITY.md for best practices on credential management."
    echo ""
    exit 1
fi